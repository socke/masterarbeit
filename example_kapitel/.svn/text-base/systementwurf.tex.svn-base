\setchapterpreamble[u]{%
\dictum[John F. Kennedy]{Einen Vorsprung im Leben hat, wer da anpackt, wo die anderen erst einmal reden. \dots}}
\chapter{System- und Softwareentwurf}

\section{Prozessablauf}

Die Abbildung \ref{fig:2007_03_13-Analyse} zeigt die gesamte Systemübersicht mit den erforderlichen Datenimporten. TTWOS wird zukünftig von einer SyBase- auf eine Oracle Datenbank umstellen. ChaMPS verfügt über eine Oracle Datenbank. 

\begin{figure}[htbp]
	\centering
		\includegraphics[width=0.50\textwidth]{bilder/2007_03_13-Analyse.png}
	\caption{Systemübersicht}
	\label{fig:2007_03_13-Analyse}
\end{figure}


Abbildung \ref{fig:2007_03_13-Analyse_Prozess_AiO} zeigt den zukünftigen Prozess in AiO, um neue Incident- oder Changeeinträge anzulegen. Zuerst wird ausgewählt, einen neuen Eintrag anzulegen, anschließend muss die Ticketnummer eingetragen werden. Es werden die bereits importierten Tickets angezeigt und können nun dem Incident Management oder Change Management Eintrag hinzugefügt werden. Ein Teil der Ticketinformationen werden in die vorhandenen Felder übernommen, weiter Daten sind dann per Drop-Down abrufbar.

\begin{figure}[htbp]
	\centering
		\includegraphics[width=0.60\textwidth]{bilder/2007_03_13-Analyse_Prozess_AiO.png}
	\caption{AiO Erstellungsprozess}
	\label{fig:2007_03_13-Analyse_Prozess_AiO}
\end{figure}


\section{Package Diagram}

Es gibt drei Pakete in diesem Projekt. Das Importer-Paket beinhaltet sämtliche Klassen und Dateien für den Importer und den Importer-Job. Das View-Paket beinhaltet alle Klassen und Dateien für die View, womit die Ansicht für die einzelnen Module wie Incident Management und Change Management gemeint sind. Als letztes Paket gibt es noch das Web-Service-Paket. Dieses Paket beinhaltet alle Dateien und Klassen die zum Web Service gehören. Abbildung \ref{fig:2007_05_22_package} zeigt das Package Diagram.

\begin{figure}[htbp]
	\centering
		\includegraphics[width=0.70\textwidth]{bilder/2007_05_22_package.png}
	\caption{Package Diagram}
	\label{fig:2007_05_22_package}
\end{figure}


\section{Klassendiagramme}

Nachfolgend die Klassendiagramme der einzelnen Pakete. Abbildung \ref{fig:klassendiagramm_importer} zeigt das Klassendiagramm des Importers. Der Importer ist für den Importvorgang zuständig. 

\subsection{Klassen des Importers}
\begin{description}
	\item[Importer] Eine abstrakte Klasse. Mögliche Importjobs müssen von dieser Klasse ableiten. 
	\item[XMLParser] Diese Klasse ist für das Parsen der XML-Konfigurationsfiles zuständig.
	\item[Config] Die Config-Klasse der PEAR-Bibliothek. Wird vom Parser benutzt um XML-Files einzulesen. Kann auch noch weitere Arten von Configurationen lesen und erzeugen.
	\item[DB] Die DB-Klasse der PEAR-Bibliothek. Wird vom Importer benutzt für die Datenbankzugriffe.
	\item[Log] Die Logging-Klasse der PEAR-Bibliothek. Wird vom Importer benutzt und loggt sämtliche Vorgänge vor, während und nach dem Importvorgang. 
	\item[ImporterWebController] Diese Klasse ist für den manuellen Importvorgang über eine Weboberfläche zuständig. Erzeugt die konkreten Importklassen, welche vom Importer abgeleitet wurden. Z.B. ImportChaMPS oder ImportTTWOS
	\item[ImportChaMPS] Die konkreten Implementierungen der Importer Klasse. Beinhaltet zusätliche Informationen über die zu importierende Datenbank.
	\item[ImportJobFactory] Abstrakte Fabrik Methode um konkrete Importer zu erzeugen. Kapselt die Erzeugung der Importer Klassen.
	\item[HTML\_Template\_Sigma] Die Template Klasse der PEAR-Bibliothek. Trennt die HTML-View vom Code mit Hilfe einer Template Engine. 
	\item[Importer\_View] Die Ansichtsklasse.    
\end{description}

\begin{figure}[htbp]
	\centering
		\includegraphics[width=1.00\textwidth]{bilder/2007_05_22_importer.png}
	\caption{Klassendiagramm Importer}
	\label{fig:klassendiagramm_importer}
\end{figure}

Es gibt zwei Möglichkeiten, wie die entsprechene View in z.B. Change Management oder Incident Management auf Daten aus der TTWOS-Datenbank zugreifen kann. Abbildung \ref{fig:2007_05_22_view} zeigt den direkten Zugriff auf die importierten Tabellen. Abbildung \ref{fig:2007_05_22_web-service} zeigt den Zugriff über den Web Service. Dem Web Service wird hier die Ticketnummer übermittelt. Anschließend werden die Ticketdaten als XML-File übertragen und mit AJAX dynamisch in die entsprechende View eingefügt. 

\begin{figure}[htbp]
	\centering
		\includegraphics[width=1.00\textwidth]{bilder/2007_05_22_view.png}
		\caption{Klassendiagramm View}
	\label{fig:2007_05_22_view}
\end{figure}

\subsection{Klassen der View}
\begin{description}
	\item[Table] Die Abstrakte Klasse Table. Beschreibt eine Tabelle und ist von der DB\_QueryTool-Klasse abgeleitet. 
	\item[MMO\_VTT\_Ersteller\_Ticket] Dies ist nur eine konkrete Tabellenimplementierung der importierten Tabelle MMO\_VTT\_Ersteller\_Ticket. Beschreibt die importierte Tabelle.   \item[Log] Die Logging-Klasse der PEAR-Bibliothek. Wird von der Table-Klasse sowie der Viewer-Klasse benutzt und loggt Vorgänge während des Zugriffs auf die Tabellen sowie der Anzeige. Auftretende Fehler werden geloggt.   
	\item[DB\_QueryTool] Die QueryTool-Klasse der PEAR-Bibliothek. Abstrahiert den Datenbankzugriff auf Tabellen.
	\item[Viewer] Die Klasse zum Anzeigen der Daten.   
	\item[CMViewer] Diese Klasse ist von Viewer abgeleitet und ist auf die Anzeige des Change Management Systems angepasst. Diese Klasse wird in der Datei cm\_newChange erzeugt.
	\item[IMViewer] Diese Klasse ist von Viewer abgeleitet und ist auf die Anzeige des Incident Management Systems angepasst. Diese Klasse wird in der Datei im\_newChange erzeugt.
	\item[TableFactory] Dies ist die Fabrik Methodenklasse zur Erzeugung konkreter Tabellenklassen. Wird von der Viewer-Klasse benutzt und damit von allen Subklassen.
\end{description}


\begin{figure}[htbp]
	\centering
		\includegraphics[width=1.00\textwidth]{bilder/2007_05_22_web-service.png}
		\caption{Klassendiagramm Web Service}
	\label{fig:2007_05_22_web-service}
\end{figure}

\subsection{Klassen des Web Services}
\begin{description}
	\item[SOAP\_WSDL] Die PEAR Klasse, welche zur Erzeugung des Proxies dient. Diese Klasse ist für die Erstellung eines Web Service Clients nötig. 
	\item[SOAP\_Server] Die PEAR Klasse welche zur Erzeugung des Web Service Servers nötig ist. 
	\item[SOAP\_DISCO\_Server] Die PEAR Klasse zur Erzeugung des DISCO-Servers. DISCO - Discovery. Ein DISCO-Server ist der Verzeichnisdienst.    
	\item[Ticket] Die Ticket-Klasse. Diese Klasse wird dem Web Service hinzugefügt und als RPC über den Web Service nutzbar gemacht. 
	\item[DB] Die PEAR Datenbank Abstraktionsklasse für den Zugriff auf die Datenbank.   
	\item[GetTicketDataClient] Der Klient zum Abruf der Ticketdaten. Dieser wird von der View benutzt.
\end{description}

\index{RPC}

\glossary{name={RPC}, description={Remote Procedure Call. Der entfernte Aufruf einer Prozedur oder Methode. Ausgelagerte Klassen/Module/Funktionen, die eine bestimmte Aufgabe erledigen werden aus der Ferne aufgerufen. Wird auch zum Teil bei Web Services benutzt oder Java RPC.},
}

\section{Zusammenfassung des Kapitels}

Das System beinhaltet einen Importer, welcher für den Import der Daten aus entfernten Datenbanken zuständig ist, eine View für die Ansicht des manuellen Importvorganges sowie den Web Service, über diesen verschiedene Dienste, wie z.B. der Abruf und das Einfügen von Ticketdaten, angeboten werden. Beim Importer wurde Wert auf Erweiterbarkeit gelegt. Neue Importjobs müssen zum einen ein XML-File deklarieren, wo festgelegt wird welche Tabellen und Attribute aus welcher Datenbank importiert werden sollen, sowie eine Klasse von der abstrakten Klasse Importer ableiten um den Importjob zu definieren. 
 