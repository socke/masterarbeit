%% $Id$
%\setchapterpreamble[u]{%
%\dictum[John F. Kennedy]{Einen Vorsprung im Leben hat, wer da anpackt, wo die anderen erst einmal reden. \dots}}
\chapter{PHPUnit} \label{anh:phpunit}

\section{Was ist PHPUnit} \index{PHPUnit}

\glossary{name={PHPUnit}, description={Ein Framework zum Testen von PHP Code.},
}

Wikipedia definiert PHPUnit folgendermassen:

\begin{quotation}
PHPUnit ist ein in PHP geschriebenes Open Source Framework zum Testen von PHP-Scripten, das besonders für automatisierte Tests einzelner Einheiten (Units) (meist Klassen oder Methoden) geeignet ist. Es basiert auf dem Konzept und der Idee von JUnit. 
 \citep[vgl.][]{wikiphpunit}	
\end{quotation}

Mit Hilfe von PHPUnit ist es möglich erstellten Code zu testen. \enquote{Unit-Tests sind essentieller Bestandteil verschiedener Software-Entwicklungsprozesse, wie Test-First-Programmierung\index{Test-First-Programmierung}, Extreme Programming \index{Extreme Programming} und testgetriebener Entwicklung.}\citep[vgl.][Kapitel 8]{bergmanphpunit} Test-First-Programmierung ist Bestandteil von Extreme Programming und testgetriebener Entwicklung. Dabei werden die Tests erstellt, bevor überhaupt der Code geschrieben wird. Dadurch schlagen natürlich alle Tests fehl, was für den Entwickler anfangs sicher sehr ungewöhnlich ist. Daran gewöhnt der Entwickler sich jedoch recht schnell. Nach Erstellung der Tests geht man nun dazu über den Code zu schreiben. Dieser wird so geschrieben, dass der Test nicht mehr fehlschlägt. Man entwickelt so eine Klasse nach der anderen und kommt kleine Schritte weiter, kann aber sicherstellen, dass der entwickelte Code getestet ist. Vorallem hat diese Art von Test den großen Vorteil, dass diese immer und immer wieder ausgeführt werden können. Herkömmliches Testen, z.B. mit Hilfe von print- oder echo-Anweisungen müssen natürlich später auskommentiert werden. Die entwickelten Unittests können, dank der heutigen schnellen Rechner, hunderte oder sogar tausende Mal ausgeführt werden und das vollautomatisch. So fällt ein Problem bei einer Änderung sofort auf. Unittest werden häufig in Kombination mit Coveragetests, also Tests welche die Testabdeckung des Codes überprüfen, eingesetzt.  

\section{PHPUnit installieren}\label{PHPUnitinstallieren}

PHPUnit sollte am besten mit Hilfe des PEAR Installers installiert werden. Vorerst muss PEAR der PHPUnit Kanal bekannt gemacht werden:

\begin{verbatim}
pear channel-discover pear.phpunit.de
\end{verbatim}

Anschließend kann das PHPUnit-Paket installiert werden:

\begin{verbatim}
pear install phpunit/PHPUnit
\end{verbatim}

\section{PHPUnit für PHP4}

Da in diesem Projekt nur PHP4 zur Verfügung steht muss auch auf die PHPUnit-Version für PHP4 zurückgegriffen werden. Diese installiert man wie folgt:

\begin{verbatim}
pear install -f http://pear.phpunit.de/get/PHPUnit-1.3.2.tgz
\end{verbatim}

PHPUnit für PHP4 ist keine vollständige Portierung von JUnit, da das Objektmodell von PHP4 gegenüber dem von PHP5 sehr eingeschränkt ist. Es fehlen einige Leistungsmerkmale wie z.B. Code-Coverage-Analyse. 
\citep[vgl.][Anhang A]{bergmanphpunit}


\section{Beispielcode PHPUnit für PHP4}

Bei PHPUnit für PHP4 muss die Testklasse von PHPUnit\_TestCase abgeleitet werden. Dies zeigt Listing \ref{lst:PHPUnit_Testklasse}.

\begin{lstlisting}[caption=PHPUnit für PHP4 Testklasse, language=PHP, label=lst:PHPUnit_Testklasse]
<?php
require_once 'PHPUnit/TestCase.php';
 
class ArrayTest extends PHPUnit_TestCase {
    var $_fixture;
 
    function setUp() {
        $this->_fixture = array();
    }
 
    function testNewArrayIsEmpty() {
        $this->assertEquals(0, sizeof($this->_fixture));
    }
 
    function testArrayContainsAnElement() {
        $this->_fixture[] = 'Element';
        $this->assertEquals(1, sizeof($this->_fixture));
    }
}
?>
\end{lstlisting}

\textbf{Erklärung:}
\begin{description}
	\item[Zeile 4] Die Testklasse wird von PHPUnit\_Testcase abgeleitet.
	\item[Zeile 11-18] Testmethoden, welche später automatisch ausgeführt werden. 
\end{description}

Listing \ref{lst:PHPUnit_Testsuite} zeigt, wie nun der Test ausgeführt werden kann.

\begin{lstlisting}[caption=PHPUnit für PHP4 Testsuite, language=PHP, label=lst:PHPUnit_Testsuite]
<?php
require_once 'ArrayTest.php';
require_once 'PHPUnit.php';
 
$suite  = new PHPUnit_TestSuite('ArrayTest');
$result = PHPUnit::run($suite);
 
print $result->toString();
?>\end{lstlisting}

\textbf{Erklärung:}
\begin{description}
	\item[Zeile 5] Eine Testsuite wird erstellt. Hierfür wird der Name der Klasse als String übergeben.
	\item[Zeile 6] Der Test wird gestartet. 
\end{description}